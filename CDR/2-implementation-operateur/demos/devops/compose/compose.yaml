services:

  traefik:
    image: "traefik:v2.9.6"
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - front-tier

  vote:
    build: 
      context: ../../vote
      dockerfile: Dockerfile
      target: production
    depends_on:
      redis:
        condition: service_healthy
    #environment:
    #  BACKEND: nats
    networks:
      - front-tier
      - back-tier

  vote-ui:
    build: ../../vote-ui
    depends_on:
      vote:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.voteui.rule=Host(`vote.traefik.me`)"
      - "traefik.http.routers.voteui.entrypoints=web"
      - "traefik.http.services.voteui.loadbalancer.server.port=80"
    ports:
      - "5000:80"
    networks:
      - front-tier
    restart: unless-stopped

  result:
    build:
      context: ../../result
      dockerfile: Dockerfile
      target: production
    depends_on:
      db:
        condition: service_healthy
    #environment:
    #  BACKEND: nats
    networks:
      - front-tier
      - back-tier

  result-ui:
    build:
      context: ../../result-ui
      dockerfile: Dockerfile
      target: production
    depends_on:
      result:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.resultui.rule=Host(`result.traefik.me`)"
      - "traefik.http.routers.resultui.entrypoints=web"
      - "traefik.http.services.resultui.loadbalancer.server.port=80"
    ports:
      - "5001:80"
    networks:
      - front-tier
    restart: unless-stopped

  worker:
    build:
      context: ../../worker/src
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - back-tier

  redis:
    image: redis:7.0.5-alpine3.16
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
    ports:
      - 6379:6379
    networks:
      - back-tier

  db:
    image: postgres:15.0-alpine3.16
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: "5s"
    ports:
      - 5432:5432
    networks:
      - back-tier

  nats:
    image: nats:2.9.11-alpine3.17
    ports:
      - 4222:4222
    networks:
      - back-tier

volumes:
  db-data:

networks:
  front-tier:
  back-tier: